spring:
  application:
    name: rjst-backend-service
  cache:
    redis:
      time-to-live: 30m
  data:
    redis:
      repositories:
        enabled: false
      host: k8s.server.lan
      password: 12345678
  datasource:
    url: jdbc:postgresql://localhost:5432/backend
    username: postgres
    password: 0eca-8d86-490d-90c
    driver-class-name: org.postgresql.Driver
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://authentik.rjst.de/application/o/rjst-backend-service-local/
      client:
        registration:
          authentik:
            clientId: "pqEw76drFTjLjJJiYNRd6m3hcs75wT4U48YdfJvS"
            clientSecret: "Txq05lEantkaw7mFp6Le9UMOaYrIyHGg6DnYtXHxC74GuLM4oCulmWMSlJkFIdOrYEiawF8px4tlTPrP8spt8CvWieYdRuNerDXuhWvf1IGPBmhN83fESVApFjsetk7V"
            scope: openid,profile,email,roles
            authorizationGrantType: authorization_code
        provider:
          authentik:
            issuer-uri: https://authentik.rjst.de/application/o/rjst-backend-service-local/
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    open-in-view: false
  liquibase:
    default-schema: public
    enabled: true
    change-log: classpath:changelog.yaml
    show-summary: off
  cloud:
    openfeign:
      client:
        config:
          ipQuery:
            url: https://api.ipquery.io
  threads:
    virtual:
      enabled: false
springdoc:
  swagger-ui:
    use-root-path: true
    oauth:
      client-id: ${spring.security.oauth2.client.registration.authentik.client-id}
      client-secret: ${spring.security.oauth2.client.registration.authentik.client-secret}
      scopes:
        - openid
        - profile
        - email
        - roles

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always

security:
  enabled: false
  authorization-url: "https://authentik.rjst.de/application/o/authorize/"
  token-url: "https://authentik.rjst.de/application/o/token/"
